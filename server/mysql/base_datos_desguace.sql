CREATE DATABASE DESGUACE;

CREATE TABLE CATEGORIAS_PIEZAS(
    ID_CATEGORIAS_PIEZAS INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_CATEGORIA VARCHAR(100)
);

CREATE TABLE DATOS_COMUNES(
    ID_DATOS_COMUNES INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(50),
    APELLIDO_A VARCHAR(50),
    APELLIDO_B VARCHAR(50),
    CONTRASENA VARCHAR(255),
    DIRECCION VARCHAR(80),
    CODIGO_POSTAL INT,
    CIUDAD VARCHAR(50),
    MUNICIPIO VARCHAR(50),
    TELEFONO VARCHAR(9) UNIQUE,
    MOVIL VARCHAR(9) UNIQUE,
    MAIL VARCHAR(50) UNIQUE,
    DNI_CIF VARCHAR(9) UNIQUE,
    FIREBASE_UID VARCHAR(128) UNIQUE,
    RAZON_SOCIAL VARCHAR(80),
    NUMERO_CUENTA VARCHAR(30) UNIQUE
);

CREATE TABLE VENDEDOR(
    ID_VENDEDOR INT AUTO_INCREMENT PRIMARY KEY,
    DATOS_COMUNES_FK INT NOT NULL,
    FOREIGN KEY (DATOS_COMUNES_FK) REFERENCES DATOS_COMUNES(ID_DATOS_COMUNES) ON DELETE CASCADE
);

CREATE TABLE CLIENTE(
    ID_CLIENTE INT AUTO_INCREMENT PRIMARY KEY, 
    DATOS_TARJETA VARCHAR(30) UNIQUE,
    DATOS_COMUNES_FK INT NOT NULL,
    FOREIGN KEY (DATOS_COMUNES_FK) REFERENCES DATOS_COMUNES(ID_DATOS_COMUNES) ON DELETE CASCADE
);

CREATE TABLE EMPLEADOS(
    ID_EMPLEADOS INT AUTO_INCREMENT PRIMARY KEY,
    NUMERO_SS BIGINT UNIQUE NOT NULL,
    TIPO_CUENTA ENUM('ADM', 'GESTOR') NOT NULL,
    TOTAL_VACACIONES INT DEFAULT 30 CHECK (TOTAL_VACACIONES >= 0),
    DATOS_COMUNES_FK INT NOT NULL,
    FOREIGN KEY (DATOS_COMUNES_FK) REFERENCES DATOS_COMUNES(ID_DATOS_COMUNES) ON DELETE CASCADE
);

CREATE TABLE NOMINAS(
    ID_NOMINAS INT AUTO_INCREMENT PRIMARY KEY,
    SUELDO_BRUTO DECIMAL(10,2) NOT NULL,
    ESTADO ENUM('PENDIENTE', 'PAGADA','BAJA') NOT NULL,
    MES DATE NOT NULL,
    EMPLEADOS_FK INT NOT NULL,
    FOREIGN KEY (EMPLEADOS_FK) REFERENCES EMPLEADOS(ID_EMPLEADOS) ON DELETE CASCADE
);

CREATE TABLE FICHAJE(
    ID_FICHAJE INT AUTO_INCREMENT PRIMARY KEY,
    HORA_ENTRADA DATETIME,
    HORA_SALIDA DATETIME,
    EMPLEADOS_FK INT NOT NULL,
    FOREIGN KEY (EMPLEADOS_FK) REFERENCES EMPLEADOS(ID_EMPLEADOS) ON DELETE CASCADE
);

CREATE TABLE VACACIONES (
    ID_VACACIONES INT AUTO_INCREMENT PRIMARY KEY,
    FECHA_INICIO DATE NOT NULL,
    FECHA_FINAL DATE NOT NULL,
    CONCEDIDAS BOOLEAN DEFAULT 0,
    EMPLEADOS_FK INT NOT NULL,
    FOREIGN KEY (EMPLEADOS_FK) REFERENCES EMPLEADOS(ID_EMPLEADOS) ON DELETE CASCADE,
    CHECK (FECHA_FINAL >= FECHA_INICIO)
);

CREATE TABLE MARCAS(
    ID_MARCAS INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_MARCA VARCHAR(50) NOT NULL
);

CREATE TABLE MODELO(
    ID_MODELO INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_MODELO VARCHAR(255),
    MARCA_MODELO_FK INT NOT NULL,
    FOREIGN KEY (MARCA_MODELO_FK) REFERENCES MARCAS(ID_MARCAS) ON DELETE CASCADE
);

CREATE TABLE FACTURA(
    ID_FACTURAS INT AUTO_INCREMENT PRIMARY KEY,
    BASE DECIMAL(10,2) NOT NULL,
    IVA DECIMAL(10,2) NOT NULL,
    TIPO_PAGO VARCHAR(80) NOT NULL,
    FECHA DATE NOT NULL,
    CLIENTE_FK INT NOT NULL,
    FOREIGN KEY (CLIENTE_FK) REFERENCES CLIENTE(ID_CLIENTE) ON DELETE CASCADE
);

CREATE TABLE PIEZAS(
    ID_PIEZAS INT AUTO_INCREMENT PRIMARY KEY,
    DESCRIPCION VARCHAR(255),
    PESO DECIMAL(10,2),
    PRECIO_COMPRA DECIMAL(10,2),
    PRECIO DECIMAL(10,2),
    REFERENCIA VARCHAR(255),
    FECHA_YEAR VARCHAR(4),
    FECHA_INICIO_VENTA DATE,
    IMAGENES VARCHAR(510),
    CATEGORIAS_FK INT,
    VENDEDOR_FK INT NOT NULL, 
    EMPLEADO_FK INT,
    VENDIDO BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (CATEGORIAS_FK) REFERENCES CATEGORIAS_PIEZAS(ID_CATEGORIAS_PIEZAS) ON DELETE SET NULL,
    FOREIGN KEY (VENDEDOR_FK) REFERENCES VENDEDOR(ID_VENDEDOR) ON DELETE CASCADE,
    FOREIGN KEY (EMPLEADO_FK) REFERENCES EMPLEADOS(ID_EMPLEADOS) ON DELETE SET NULL
);

CREATE TABLE PIEZAS_MODELOS(
    ID_PIEZAS_MODELOS INT AUTO_INCREMENT PRIMARY KEY,
    PIEZAS_FK INT NOT NULL,
    MODELO_FK INT NOT NULL,
    FOREIGN KEY (PIEZAS_FK) REFERENCES PIEZAS(ID_PIEZAS) ON DELETE CASCADE,
    FOREIGN KEY (MODELO_FK) REFERENCES MODELO(ID_MODELO) ON DELETE CASCADE
);

CREATE TABLE LINEA_FACTURA(
    ID_LINEA_FACTURA INT AUTO_INCREMENT PRIMARY KEY,
    PIEZAS_FK INT NOT NULL,
    FACTURA_FK INT NOT NULL,
    PRECIO DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (PIEZAS_FK) REFERENCES PIEZAS(ID_PIEZAS) ON DELETE CASCADE,
    FOREIGN KEY (FACTURA_FK) REFERENCES FACTURA(ID_FACTURAS) ON DELETE CASCADE
);

-- Actualiza precio de la LINEA_FACTURA
DELIMITER $$

CREATE PROCEDURE actualizar_precio_linea_factura(
    IN p_id_linea_factura INT
)
BEGIN
    DECLARE v_piezas_fk INT;
    DECLARE v_precio_pieza DECIMAL(10,2);

    -- Obtener la clave foránea de PIEZAS asociada a la línea de factura
    SELECT PIEZAS_FK INTO v_piezas_fk
    FROM LINEA_FACTURA
    WHERE ID_LINEA_FACTURA = p_id_linea_factura;

    -- Obtener el precio actual de esa pieza
    SELECT PRECIO INTO v_precio_pieza
    FROM PIEZAS
    WHERE ID_PIEZAS = v_piezas_fk;

    -- Actualizar el precio en la línea de factura
    UPDATE LINEA_FACTURA
    SET PRECIO = v_precio_pieza
    WHERE ID_LINEA_FACTURA = p_id_linea_factura;
END$$

DELIMITER ;

-- Actualiza la base y el IVA de la factura

DELIMITER //

CREATE PROCEDURE actualizar_precio_total_factura(IN facturaId INT)
BEGIN
    DECLARE suma_base DECIMAL(10,2) DEFAULT 0.00;
    DECLARE valor_iva DECIMAL(10,2) DEFAULT 0.00;

    -- Sumar precios de las líneas de factura asociadas
    SELECT IFNULL(SUM(PRECIO), 0.00) INTO suma_base
    FROM LINEA_FACTURA
    WHERE FACTURA_FK = facturaId;

    -- Calcular IVA (21%)
    SET valor_iva = ROUND(suma_base * 0.21, 2);

    -- Actualizar la factura con la nueva base e IVA
    UPDATE FACTURA
    SET BASE = suma_base,
        IVA = valor_iva
    WHERE ID_FACTURAS = facturaId;
END //

DELIMITER ;



-- OBTENER NOMBRE COLUMNAS NOMINAS

DELIMITER //

CREATE PROCEDURE ObtenerNombresColumnasNominas()
BEGIN
    SELECT COLUMN_NAME 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = DATABASE() 
    AND (TABLE_NAME = 'NOMINAS' OR TABLE_NAME = 'DATOS_COMUNES')
    AND COLUMN_KEY NOT IN ('PRI', 'MUL')  -- Excluye claves primarias y foráneas
    AND COLUMN_NAME NOT IN ('FIREBASE_UID', 'CONTRASENA', 'DIRECCION', 'CODIGO_POSTAL', 'CIUDAD', 
    'MUNICIPIO', 'TELEFONO', 'MOVIL', 'MAIL', 'NUMERO_CUENTA', 'NOMBRE', 'APELLIDO_A', 'APELLIDO_B', 'RAZON_SOCIAL', 'VENDIDO'); -- Excluir las columnas específicas
END //

DELIMITER ;

-- OBTENER NOMBRE COLUMNAS PIEZAS

DELIMITER //

CREATE PROCEDURE ObtenerNombresColumnasPiezas()
BEGIN
    SELECT COLUMN_NAME 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = DATABASE() 
    AND (TABLE_NAME = 'PIEZAS' OR TABLE_NAME = 'CATEGORIAS_PIEZAS' OR TABLE_NAME = 'DATOS_COMUNES' OR TABLE_NAME = 'MODELO' OR TABLE_NAME = 'MARCAS')
    AND COLUMN_KEY NOT IN ('PRI', 'MUL')  -- Excluye claves primarias y foráneas
    AND COLUMN_NAME NOT IN ('FIREBASE_UID', 'CONTRASENA', 'DIRECCION', 'CODIGO_POSTAL', 'CIUDAD', 
    'MUNICIPIO', 'TELEFONO', 'MOVIL', 'MAIL', 'NUMERO_CUENTA', 'NOMBRE', 'APELLIDO_A', 'APELLIDO_B', 'VENDIDO'); -- Excluir las columnas específicas
END //

DELIMITER ;

-- OBTENER NOMBRE COLUMNAS RESTABLECER CONTRASEÑA

DELIMITER //

CREATE PROCEDURE ObtenerNombresColumnasPassword()
BEGIN
    SELECT COLUMN_NAME 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = DATABASE() 
    AND (TABLE_NAME = 'DATOS_COMUNES')
    AND COLUMN_KEY NOT IN ('PRI', 'MUL')  -- Excluye claves primarias y foráneas
    AND COLUMN_NAME NOT IN ('FIREBASE_UID', 'RAZON_SOCIAL', 'NUMERO_CUENTA', 'CONTRASENA'); -- Excluir las columnas específicas
END //

DELIMITER ;

-- OBTENER NOMBRE COLUMNAS EMPLEADOS

DELIMITER //

CREATE PROCEDURE ObtenerNombresColumnasEmpleados()
BEGIN
    SELECT COLUMN_NAME 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = DATABASE() 
    AND (TABLE_NAME = 'EMPLEADOS' OR TABLE_NAME = 'DATOS_COMUNES')
    AND COLUMN_KEY NOT IN ('PRI', 'MUL')  -- Excluye claves primarias y foráneas
    AND COLUMN_NAME NOT IN ('FIREBASE_UID', 'RAZON_SOCIAL'); -- Excluir las columnas específicas
END //

DELIMITER ;

-- OBTENER NOMBRE COLUMNAS VENDEDORES

DELIMITER //

CREATE PROCEDURE ObtenerNombresColumnasVendedores()
BEGIN
    SELECT COLUMN_NAME 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = DATABASE() 
    AND (TABLE_NAME = 'VENDEDORES' OR TABLE_NAME = 'DATOS_COMUNES')
    AND COLUMN_KEY NOT IN ('PRI', 'MUL')  -- Excluye claves primarias y foráneas
    AND COLUMN_NAME NOT IN ('FIREBASE_UID', 'NOMBRE', 'APELLIDO_A', 'APELLIDO_B', 'CONTRASENA', 'NUMERO_SS'); -- Excluir las columnas específicas
END //

DELIMITER ;

-- OBTENER NOMBRE COLUMNAS MODELOS

DELIMITER //

CREATE PROCEDURE ObtenerNombresColumnasModelos()
BEGIN
    SELECT COLUMN_NAME 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = DATABASE() 
    AND (TABLE_NAME = 'MODELO' OR TABLE_NAME = 'MARCAS')
    AND COLUMN_KEY NOT IN ('PRI', 'MUL');  -- Excluye claves primarias y foráneas
END //

DELIMITER ;

-- OBTENER NOMBRE COLUMNAS MARCAS

DELIMITER //

CREATE PROCEDURE ObtenerNombresColumnasMarcas()
BEGIN
    SELECT COLUMN_NAME 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = DATABASE() 
    AND (TABLE_NAME = 'MARCAS')
    AND COLUMN_KEY NOT IN ('PRI', 'MUL');  -- Excluye claves primarias y foráneas
END //

DELIMITER ;

-- OBTENER NOMBRE COLUMNAS FACTURAS

DELIMITER //

CREATE PROCEDURE ObtenerNombresColumnasFacturas()
BEGIN
    SELECT COLUMN_NAME
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA = DATABASE() 
    AND (TABLE_NAME = 'FACTURA' OR TABLE_NAME = 'LINEA_FACTURA' OR TABLE_NAME = 'PIEZAS' OR TABLE_NAME = 'DATOS_COMUNES')
    AND COLUMN_KEY NOT IN ('PRI', 'MUL')
    AND COLUMN_NAME NOT IN ('DESCRIPCION', 'PESO', 'PRECIO_COMPRA', 'PRECIO', 'CIUDAD', 
    'FECHA_YEAR', 'FECHA_INICIO_VENTA', 'IMAGENES', 'CATEGORIAS_FK', 'VENDEDOR_FK', 'EMPLEADO_FK', 'VENDIDO', 'FECHA_CREACION', 'FECHA_MODIFICACION', 'FIREBASE_UID', 'CONTRASENA', 'DIRECCION', 'CODIGO_POSTAL', 'CIUDAD', 
    'MUNICIPIO', 'TELEFONO', 'MOVIL', 'MAIL', 'NUMERO_CUENTA', 'NOMBRE', 'APELLIDO_A', 'APELLIDO_B', 'RAZON_SOCIAL', 'USUARIO_CREACION', 'USUARIO_MODIFICACION'); 
END //

DELIMITER ;

-- Borrar todos los registros con clave foránea en null o vacío
DELIMITER $$

CREATE PROCEDURE limpiar_registros_huerfanos()
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE nombre_tabla VARCHAR(255);
    DECLARE nombre_columna VARCHAR(255);
    DECLARE cur CURSOR FOR 
        SELECT TABLE_NAME, COLUMN_NAME
        FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
        WHERE TABLE_SCHEMA = DATABASE()
          AND REFERENCED_TABLE_NAME IS NOT NULL;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;

    bucle_tablas: LOOP
        FETCH cur INTO nombre_tabla, nombre_columna;
        IF done THEN
            LEAVE bucle_tablas;
        END IF;

        -- Generamos la consulta dinámica para eliminar registros huérfanos
        SET @sql = CONCAT('DELETE FROM ', nombre_tabla, ' WHERE ', nombre_columna, ' IS NULL OR ', nombre_columna, ' = '''';');
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    END LOOP;

    CLOSE cur;
END$$

DELIMITER ;


-- Insertar categorías de piezas de coches
INSERT INTO CATEGORIAS_PIEZAS (NOMBRE) VALUES 
('Motor'),
('Transmisión'),
('Frenos'),
('Suspensión'),
('Escape'),
('Sistema eléctrico'),
('Carrocería'),
('Interior');

-- Insertar marcas de coches
INSERT INTO MARCAS (NOMBRE_MARCA) VALUES 
('Toyota'),
('Ford'),
('Volkswagen'),
('BMW'),
('Mercedes-Benz'),
('Audi'),
('Honda'),
('Nissan');

-- Insertar modelos de coches (relacionados con las marcas)
INSERT INTO MODELO (NOMBRE_MODELO, MARCA_MODELO_FK) VALUES 
('Corolla', 1), -- Toyota
('Camry', 1), 
('Ranger', 2), -- Ford
('Mustang', 2),
('Golf', 3), -- Volkswagen
('Passat', 3),
('Serie 3', 4), -- BMW
('Serie 5', 4),
('Clase A', 5), -- Mercedes-Benz
('Clase C', 5),
('A3', 6), -- Audi
('A4', 6),
('Civic', 7), -- Honda
('Accord', 7),
('Altima', 8), -- Nissan
('Sentra', 8);


-- Disparador para CATEGORIAS_PIEZAS

DELIMITER $$
CREATE TRIGGER before_delete_categoria
BEFORE DELETE ON CATEGORIAS_PIEZAS
FOR EACH ROW
BEGIN
  UPDATE PIEZAS SET CATEGORIAS_FK = NULL WHERE CATEGORIAS_FK = OLD.ID_CATEGORIAS_PIEZAS;
END$$
DELIMITER ;

-- Disparador para VENDEDOR

DELIMITER $$
CREATE TRIGGER before_delete_vendedor
BEFORE DELETE ON VENDEDOR
FOR EACH ROW
BEGIN
  DELETE FROM PIEZAS WHERE VENDEDOR_FK = OLD.ID_VENDEDOR;
END$$
DELIMITER ;

-- Disparador para CLIENTE

DELIMITER $$
CREATE TRIGGER before_delete_cliente
BEFORE DELETE ON CLIENTE
FOR EACH ROW
BEGIN
  DELETE FROM FACTURA WHERE CLIENTE_FK = OLD.ID_CLIENTE;
END$$
DELIMITER ;

-- Disparador para EMPLEADOS

DELIMITER $$
CREATE TRIGGER before_delete_empleado
BEFORE DELETE ON EMPLEADOS
FOR EACH ROW
BEGIN
  DELETE FROM NOMINAS WHERE EMPLEADOS_FK = OLD.ID_EMPLEADOS;
  DELETE FROM VACACIONES WHERE EMPLEADOS_FK = OLD.ID_EMPLEADOS;
  DELETE FROM FICHAJE WHERE EMPLEADOS_FK = OLD.ID_EMPLEADOS;
  UPDATE PIEZAS SET EMPLEADO_FK = NULL WHERE EMPLEADO_FK = OLD.ID_EMPLEADOS;
END$$
DELIMITER ;

-- Disparador para MARCAS

DELIMITER $$
CREATE TRIGGER before_delete_marca
BEFORE DELETE ON MARCAS
FOR EACH ROW
BEGIN
  DELETE FROM MODELO WHERE MARCA_MODELO_FK = OLD.ID_MARCAS;
END$$
DELIMITER ;

-- Disparador para MODELO

DELIMITER $$
CREATE TRIGGER before_delete_modelo
BEFORE DELETE ON MODELO
FOR EACH ROW
BEGIN
  DELETE FROM PIEZAS_MODELOS WHERE MODELO_FK = OLD.ID_MODELO;
END$$
DELIMITER ;

-- Disparador para FACTURA

DELIMITER $$
CREATE TRIGGER before_delete_factura
BEFORE DELETE ON FACTURA
FOR EACH ROW
BEGIN
  DELETE FROM LINEA_FACTURA WHERE FACTURA_FK = OLD.ID_FACTURAS;
END$$
DELIMITER ;

--Disparador para PIEZAS

DELIMITER $$
CREATE TRIGGER before_delete_pieza
BEFORE DELETE ON PIEZAS
FOR EACH ROW
BEGIN
  DELETE FROM LINEA_FACTURA WHERE PIEZAS_FK = OLD.ID_PIEZAS;
  DELETE FROM PIEZAS_MODELOS WHERE PIEZAS_FK = OLD.ID_PIEZAS;
END$$
DELIMITER ;